{"version":3,"sources":["typescript/interfaces.ts","state/slices/expenses.ts","state/slices/selectedCategory.ts","state/slices/selectedUser.ts","components/ExpensesTable/ExpensesTable.tsx","components/Expenses/Expenses.tsx","components/Header/Header.tsx","state/slices/users.ts","components/UsersSidebar/UsersSidebar.tsx","state/slices/errors.ts","App.tsx","store.ts","index.tsx"],"names":["Categories","initialState","user","firstName","lastName","id","budget","category","cost","description","holderID","ExpensesSlice","createSlice","name","reducers","addExpense","state","payload","push","updateExpense","console","log","newState","filter","expense","deleteExpense","actions","SelectedCategorySlice","setSelectedCategory","action","SelectedUserSlice","setSelectedUser","ExpensesTable","handleEditMode","dispatch","useDispatch","expenses","useSelector","selectedUser","selectedCategory","useState","filteredExpenses","setFilteredExpenses","expenseElements","setExpenseElements","useEffect","newExpenses","elements","map","i","className","onClick","icon","faEdit","faTrash","colSpan","element","Expenses","pingErrorMessage","total","setTotal","selectedUserTotal","setSelectedUserTotal","selectedCategoryTotal","setSelectedCategoryTotal","addingExpense","setAddingExpense","setCategory","setDescription","setCost","costError","setCostError","editMode","setEditMode","editingID","setEditingID","toggleAddingExpense","prev","a","Promise","res","setTimeout","newTotal","length","forEach","onChange","e","value","currentTarget","num","userBudget","preventDefault","Math","floor","random","Header","errorMessage","message","UsersSlice","addUser","updateUser","deleteUser","UsersSidebar","users","addingUser","setAddingUser","setFirstName","setLastName","setBudget","budgetError","setBudgetError","filterInput","setFilterInput","filteredUsers","setFilteredUsers","toggleAddingUser","toLowerCase","includes","placeholder","ErrorSlice","setErrorMessage","App","clearTimeout","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","configureStore","reducer","UserReducer","ExpenseReducer","ErrorReducer","SelectedUserReducer","SelectedCategoryReducer","devTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e617a50.chunk.js","sourcesContent":["export interface UserInterface {\n  firstName: string\n  lastName: string\n  id: string\n  budget: number\n}\n\nexport interface ExpenseInterface {\n  user: UserInterface\n  category: Categories\n  cost: number\n  description: string\n  holderID: string\n  id: string\n}\n\nexport enum Categories {\n  Food = \"Food\",\n  Travel = \"Travel\",\n  Health = \"Health\",\n  Supplies = \"Supplies\"\n}","import { createSlice } from \"@reduxjs/toolkit\"\nimport { Categories, ExpenseInterface } from \"../../typescript/interfaces\"\n\nconst initialState: ExpenseInterface[] = [\n  {\n    user: {\n      firstName: \"Jersey\",\n      lastName: \"Mike\",\n      id: \"Mike1234\",\n      budget: 10000\n    },\n    category: Categories[\"Food\"],\n    cost: 1000,\n    description: \"Delicious sandwich party\",\n    holderID: \"Mike1234\",\n    id: \"Food1235\"\n  },\n  {\n    user: {\n      firstName: \"Dustin\",\n      lastName: \"Winkler\",\n      id: \"Dustin1234\",\n      budget: 1000\n    },\n    category: Categories[\"Travel\"],\n    cost: 12,\n    description: \"Trip to Amsterdam\",\n    holderID: \"Dustin1234\",\n    id: \"Food1234\"\n  }\n]\n\n\nexport const ExpensesSlice = createSlice({\n  name: 'expenses',\n  initialState,\n  reducers: {\n    addExpense: (state, { payload }) => {\n      state.push(payload)\n    },\n    updateExpense: (state, { payload }) => {\n      console.log('payload', payload);\n      \n      let newState = state.filter(expense => {\n        return expense.id !== payload.id\n      })\n      console.log(newState);\n      \n      newState.push(payload)\n      return newState\n    },\n    deleteExpense: (state, { payload }) => {\n      let newState = state.filter(expense => {\n        console.log(expense.id !== payload.id);\n        \n        return expense.id !== payload.id\n      })\n      return newState\n    }\n  }\n})\n\nexport const { addExpense, updateExpense, deleteExpense } = ExpensesSlice.actions\n\nexport default ExpensesSlice.reducer","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface SelectedCategoryState {\n  category: null | string\n}\n\nconst initialState: SelectedCategoryState = {\n  category: null\n}\n\nexport const SelectedCategorySlice = createSlice({\n  name: 'SelectedCategory',\n  initialState,\n  reducers: {\n    setSelectedCategory: (state, action: PayloadAction<string | null>) => {\n      if (state.category === action.payload) {\n        state.category = null\n      }\n      state.category = action.payload\n    }\n  }\n})\n\nexport const { setSelectedCategory } = SelectedCategorySlice.actions\n\nexport default SelectedCategorySlice.reducer","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { UserInterface } from \"../../typescript/interfaces\";\n\ninterface SelectedUserState {\n  user: null | UserInterface\n}\n\nconst initialState: SelectedUserState = {\n  user: null\n}\n\nexport const SelectedUserSlice = createSlice({\n  name: 'SelectedUser',\n  initialState,\n  reducers: {\n    setSelectedUser: (state, action: PayloadAction<UserInterface | null>) => {\n      if (state.user?.id === action.payload?.id) {\n        state.user = null\n      } else {\n        state.user = action.payload\n      }\n    }\n  }\n})\n\nexport const { setSelectedUser } = SelectedUserSlice.actions\n\nexport default SelectedUserSlice.reducer","import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React, { useState, useEffect, FC } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteExpense } from '../../state/slices/expenses'\nimport { RootState } from '../../store'\nimport { ExpenseInterface } from '../../typescript/interfaces'\nimport './ExpensesTable.css'\n\ninterface ExpensesTableProps {\n  handleEditMode: Function\n}\n\nconst ExpensesTable: FC<ExpensesTableProps> = ({ handleEditMode }) => {\n  const dispatch = useDispatch()\n  const expenses = useSelector((state: RootState) => state.expenses)\n  const selectedUser = useSelector((state: RootState) => state.selectedUser)\n  const selectedCategory = useSelector((state: RootState) => state.selectedCategory)\n\n  const [filteredExpenses, setFilteredExpenses] = useState<ExpenseInterface[]>([])\n  const [expenseElements, setExpenseElements] = useState<JSX.Element[]>([])\n\n  // useeffect to create table elements then iterate over them in return section\n  useEffect(() => {\n    // if selectedUser, filter by their id\n    // if selectedCategory, filter by that\n    // update state\n\n    let newExpenses = expenses\n    \n    if (selectedUser.user) {\n      newExpenses = newExpenses.filter(expense => {\n        return (expense.holderID === selectedUser.user?.id)\n      })\n    }\n\n    if (selectedCategory.category) {\n      newExpenses = newExpenses.filter(expense => {\n        return (expense.category === selectedCategory.category)\n      })\n    }\n\n    setFilteredExpenses(newExpenses)\n  },[expenses, selectedUser, selectedCategory])\n\n  useEffect(() => {\n    if (filteredExpenses) {\n      const elements = filteredExpenses.map((expense, i)=> {\n        return (\n          <tr key={i}>\n            <td>{`${expense.user.firstName} ${expense.user.lastName}`}</td>\n            <td>{expense.category}</td>\n            <td>{expense.description}</td>\n            <td>${expense.cost}</td>\n            <td className=\"table-change\">\n              <div onClick={()=>{handleEditMode(expense)}}>\n                <FontAwesomeIcon className=\"icon-button edit\" icon={faEdit} />\n              </div>\n              <div onClick={()=>{dispatch(deleteExpense(expense))}}>\n                <FontAwesomeIcon className=\"icon-button trash\" icon={faTrash} />\n              </div>\n            </td>\n          </tr>\n        )\n      })\n      setExpenseElements(elements)      \n    }\n  }, [filteredExpenses, handleEditMode, dispatch])\n\n  return (\n    <div className=\"table-container\">\n      <table className=\"expenses-table\">\n        <thead>\n          <tr>\n            <th className=\"table-header\" colSpan={5} >Expenses</th>\n          </tr>\n        \n          <tr>\n            <th>Name</th>\n            <th>Category</th>\n            <th>Description</th>\n            <th>Cost</th>\n            <th>Update</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expenseElements.map(element => {\n            return element\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default ExpensesTable\n","import React, { useState, useEffect, FC } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addExpense, updateExpense } from '../../state/slices/expenses'\nimport { setSelectedCategory } from '../../state/slices/selectedCategory'\nimport { setSelectedUser } from '../../state/slices/selectedUser'\nimport { RootState } from '../../store'\nimport { ExpenseInterface } from '../../typescript/interfaces'\nimport ExpensesTable from '../ExpensesTable/ExpensesTable'\nimport './Expenses.css'\n\ninterface ExpensesProps {\n  pingErrorMessage: Function\n}\n\nconst Expenses: FC<ExpensesProps> = ({ pingErrorMessage }) => {\n  const expenses = useSelector((state: RootState) => state.expenses)\n  const selectedUser = useSelector((state: RootState) => state.selectedUser)\n  const selectedCategory = useSelector((state: RootState) => state.selectedCategory)\n  const dispatch = useDispatch()\n\n  const [total, setTotal] = useState(0)\n  const [selectedUserTotal, setSelectedUserTotal] = useState(0)\n  const [selectedCategoryTotal, setSelectedCategoryTotal] = useState(0)\n  const [addingExpense, setAddingExpense] = useState(false)\n  const [category, setCategory] = useState('Food')\n  const [description, setDescription] = useState('')\n  const [cost, setCost] = useState(0)\n  const [costError, setCostError] = useState(false)\n  const [editMode, setEditMode] = useState(false)\n  const [editingID, setEditingID] = useState<string | null>(null)\n\n  useEffect(() => {\n    let newTotal = 0\n    if (expenses.length > 0) {\n      expenses.forEach(expense => {\n        newTotal += expense.cost\n      })\n    } else {\n      newTotal = 0\n    }\n    setTotal(newTotal)\n\n  }, [expenses])\n\n  useEffect(() => {\n    let newTotal = 0\n    if (expenses.length > 0 && selectedUser) {\n      let filteredExpenses = expenses.filter(expense => {\n        return expense.holderID === selectedUser.user?.id\n      })\n      filteredExpenses.forEach(expense => {\n        newTotal += expense.cost\n      })\n    } else {\n      newTotal = 0\n    }\n    setSelectedUserTotal(newTotal)\n\n  }, [expenses, selectedUser])\n\n  useEffect(()=>{\n    let newTotal = 0\n    if (expenses.length > 0 && selectedCategory) {\n      let filteredExpenses = expenses.filter(expense => {\n        return expense.category === selectedCategory.category\n      })\n      filteredExpenses.forEach(expense => {\n        newTotal += expense.cost\n      })\n    } else {\n      newTotal = total\n    }\n    setSelectedCategoryTotal(newTotal)\n  },[selectedCategory, expenses, total])\n\n  useEffect(()=>{\n    setAddingExpense(false)\n  },[selectedUser])\n\n  function toggleAddingExpense() {\n    if (!selectedUser.user) return\n    setAddingExpense(prev => {\n      return !prev\n    })\n    if (editMode) {\n      setEditMode(false)\n      setCategory('Food')\n      setDescription('')\n      setCost(0)\n    }\n  }\n\n  async function handleEditMode(expense: ExpenseInterface) {\n    if (selectedUser.user?.id !== expense.user.id) {\n      dispatch(setSelectedUser(expense.user))\n    }\n    await new Promise((res) => setTimeout(res,500))\n    setEditingID(expense.id)\n    setCategory(expense.category)\n    setDescription(expense.description)\n    setCost(expense.cost)\n    setEditMode(true)\n    setAddingExpense(true)\n  }\n\n  function handleCategory(e: React.FormEvent<HTMLSelectElement>) {\n    const value = e.currentTarget.value\n    setCategory(value)\n  }\n\n  function handleDescription(e: React.FormEvent<HTMLInputElement>) {\n    const value = e.currentTarget.value\n    setDescription(value)\n  }\n\n  function handleCost(e: React.FormEvent<HTMLInputElement>) {\n    const num = +e.currentTarget.value\n    setCost(num)\n    const userBudget = selectedUser.user?.budget || 0\n    console.log(selectedUser.user?.budget, selectedUserTotal + num);\n    if (!num || ((selectedUserTotal + num) > userBudget)) {\n      setCostError(true)\n      if (!num) {\n        pingErrorMessage('The cost must be a valid number')\n      } else {\n        pingErrorMessage('That would put them over budget')\n      }\n    } else {\n      setCostError(false)\n    }\n  }\n\n\n  function handleSubmit(e: React.FormEvent<HTMLButtonElement>) {\n    e.preventDefault()\n\n    if (!costError) {\n      if (editMode) {\n        dispatch(updateExpense({\n          user: selectedUser.user,\n          category,\n          cost,\n          description,\n          holderID: selectedUser.user?.id,\n          id: editingID\n        }))\n        toggleAddingExpense()\n        \n      } else {\n        dispatch(addExpense({\n          user: selectedUser.user,\n          category,\n          cost,\n          description,\n          holderID: selectedUser.user?.id,\n          id: Math.floor(Math.random()*10000) + 1\n        }))\n    \n        setCategory('Food')\n        setDescription('')\n        setCost(0)\n        toggleAddingExpense()\n      }\n    }\n  }\n\n  function handleSelectedCategory(e: React.FormEvent<HTMLSelectElement>) {\n    const value = e.currentTarget.value\n    if (value === \"None\") {\n      dispatch(setSelectedCategory(null))\n    } else {\n      dispatch(setSelectedCategory(value))\n    }\n  }\n\n  return (\n    <div className=\"expenses-header-container\">\n      <div className=\"expense-totals\">\n        <div className=\"expenses-totals-container\">\n          <p className=\"expenses-header-money\">${total}</p>\n          <p className=\"expenses-header-description\">\n            TOTAL COMPANY EXPENSES\n          </p>\n        </div>\n\n        <div className=\"expenses-totals-container\">\n          <p className=\"expenses-header-money\">${selectedUserTotal}</p>\n          <p className=\"expenses-header-description\">\n            {selectedUser.user ? \n              `TOTAL EXPENSES FOR: ${selectedUser.user?.firstName}` :\n              \"SELECT A USER TO SEE THEIR TOTAL\"\n            }\n          </p>\n        </div>\n\n        <div className=\"expenses-totals-container\">\n          <p className=\"expenses-header-money\">${selectedCategoryTotal}</p>\n          <span className=\"expenses-header-description\">\n            FILTER BY: <form className=\"filter-category-form\">\n              <select onChange={handleSelectedCategory}>\n                <option value={''}>None</option>\n                <option value=\"Food\">Food</option>\n                <option value=\"Travel\">Travel</option>\n                <option value=\"Health\">Health</option>\n                <option value=\"Supplies\">Supplies</option>\n              </select>\n            </form> \n            TOTAL EXPENSES\n          </span>\n        </div>\n        \n      </div>\n\n      <button onClick={toggleAddingExpense} className=\"\"> {selectedUser.user ? `Add Expense for ${selectedUser.user?.firstName} ` : \"Select a User to add an Expense for them \"}\n        <span className={\"plus-button \" + (addingExpense ? \" rotated\" : \"\")}> +</span>\n      </button>\n\n      \n\n      <form className={\"expense-form \" + (addingExpense ? \"form-on\" : \"\")}>\n        <label>Description</label>\n        <input value={description} onChange={handleDescription} />\n        <label>Cost</label>\n        <input className={costError ? 'error' : ''} value={cost} onChange={handleCost} />\n        <label>Category</label>\n        <select onChange={handleCategory}>\n          <option value=\"Food\">Food</option>\n          <option value=\"Travel\">Travel</option>\n          <option value=\"Health\">Health</option>\n          <option value=\"Supplies\">Supplies</option>\n        </select>\n        <button onClick={handleSubmit}>{editMode ? \"Update\" : \"Create\"} Expense</button>\n      </form>\n\n      <ExpensesTable handleEditMode={handleEditMode} />\n\n    </div>\n  )\n}\n\nexport default Expenses\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../store'\nimport './Header.css'\n\nfunction Header() {\n  const errorMessage = useSelector((state: RootState) => state.errorMessage)\n\n  return (\n    <div>\n      <div className={\"error-message \" + (errorMessage.message ? \"shown\" : \"\")}>\n        {errorMessage.message && \n          errorMessage.message\n        }\n      </div>\n\n      <h1 className=\"main-header\">\n      Expense Tracker\n    </h1>\n    </div>\n  )\n}\n\nexport default Header\n","import { createSlice } from \"@reduxjs/toolkit\"\nimport { UserInterface } from \"../../typescript/interfaces\"\n\nconst initialState: UserInterface[] = [\n  {\n    firstName: \"Jersey\",\n    lastName: \"Mike\",\n    id: \"Mike1234\",\n    budget: 10000\n  },\n  {\n    firstName: \"Dustin\",\n    lastName: \"Winkler\",\n    id: \"Dustin1234\",\n    budget: 1000\n  }\n]\n\nexport const UsersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    addUser: (state, { payload }) => {\n      state.push(payload)\n    },\n    updateUser: (state, { payload }) => {\n      let newState = state.filter(user => {\n        return user.id !== payload.id\n      })\n      newState.push(payload)\n      return newState\n    },\n    deleteUser: (state, { payload }) => {\n      const newState = state.filter(user => {\n        return user.id !== payload.id\n      })\n      return newState\n    }\n  }\n})\n\nexport const { addUser, updateUser, deleteUser } = UsersSlice.actions\n\nexport default UsersSlice.reducer","import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React, { useState, useEffect, FC } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setSelectedUser } from '../../state/slices/selectedUser'\nimport { addUser, updateUser } from '../../state/slices/users'\nimport { RootState } from '../../store'\nimport { UserInterface } from '../../typescript/interfaces'\nimport './UsersSidebar.css'\n\ninterface UsersSidebarProps {\n  pingErrorMessage: Function\n  deleteUser: Function\n}\n\nconst UsersSidebar: FC<UsersSidebarProps> = ({ pingErrorMessage, deleteUser }) =>  {\n\n  const users = useSelector((state: RootState) => state.users)\n  const selectedUser = useSelector((state: RootState) => state.selectedUser)\n  const dispatch = useDispatch()\n\n  const [addingUser, setAddingUser] = useState(false)\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [budget, setBudget] = useState(0)\n  const [budgetError, setBudgetError] = useState(false)\n  const [editMode, setEditMode] = useState(false)\n  const [filterInput, setFilterInput] = useState('')\n  const [filteredUsers, setFilteredUsers] = useState<UserInterface[]>(users)\n\n  useEffect(() => {\n    if (filterInput === '') {\n      setFilteredUsers(users)\n    } else {\n      setFilteredUsers(prev => {\n        return prev.filter(user => {\n          return (\n            user.firstName.toLowerCase().includes(filterInput) ||\n            user.lastName.toLowerCase().includes(filterInput)\n          )\n        })\n      })\n    }\n\n    \n  }, [filterInput, users])\n\n  function toggleAddingUser() {\n    setAddingUser(prev => {\n      return !prev\n    })\n    if (editMode) {\n      setEditMode(false)\n      setFirstName('')\n      setLastName('')\n      setBudget(0)\n    }\n  }\n\n  function handleFirstName(e: React.FormEvent<HTMLInputElement>) {\n    const value = e.currentTarget.value\n    setFirstName(value)\n  }\n\n  function handleLastName(e: React.FormEvent<HTMLInputElement>) {\n    const value = e.currentTarget.value\n    setLastName(value)\n  }\n\n  function handleBudget(e: React.FormEvent<HTMLInputElement>) {\n    const value = +e.currentTarget.value\n    setBudget(value)\n    if (!!value) {\n      setBudgetError(false)\n    } else {\n      setBudgetError(true)\n      pingErrorMessage('The budget must be a valid number')\n    }\n  }\n\n  function handleEditMode(user: UserInterface) {\n    setFirstName(user.firstName)\n    setLastName(user.lastName)\n    setBudget(user.budget)\n    setEditMode(true)\n    setAddingUser(true)\n    if (selectedUser.user?.id !== user.id) {\n      dispatch(setSelectedUser(user))\n    }\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLButtonElement>) {\n    e.preventDefault()\n    if (!budgetError) {\n      if (editMode) {\n        console.log('this');\n        if (!selectedUser.user) return\n        dispatch(updateUser({\n          firstName,\n          lastName,\n          budget,\n          id: selectedUser.user.id\n        }))\n\n        dispatch(setSelectedUser({\n          firstName,\n          lastName,\n          budget,\n          id: selectedUser.user.id\n        }))\n\n        toggleAddingUser()\n        \n      } else {\n        \n        dispatch(addUser({\n          firstName,\n          lastName,\n          budget,\n          id: Math.floor(Math.random()*10000) + 1\n        }))\n    \n        setFirstName('')\n        setLastName('')\n        toggleAddingUser()\n      }\n    }\n  }\n\n  function handleFilterInput(e: React.FormEvent<HTMLInputElement>) {\n    const value = e.currentTarget.value\n    setFilterInput(value.toLowerCase())\n  }\n\n  return (\n    <div className=\"users-container\">\n      <h1>Users</h1>\n      <h4>Click a name to select them<br></br>\n      This will filter to their expenses as well.\n      </h4>\n\n      <button className=\"toggle-user-form\" onClick={toggleAddingUser}>Add User <span className={\"plus-button \" + (addingUser ? \"rotated\" : \"\")}>+</span></button>\n      \n      <form className={\"user-form \" + (addingUser ? \"form-on\" : \"\")}>\n        <label>First Name</label>\n        <input value={firstName} onChange={handleFirstName} />\n        <label>Last Name</label>\n        <input value={lastName} onChange={handleLastName} />\n        <label>Budget</label>\n        <input className={budgetError ? 'error' : ''} value={budget} onChange={handleBudget} />\n        <button onClick={handleSubmit}>{editMode ? \"Update \" : \"Create \"} User</button>\n      </form>\n\n      <input className=\"user-search\" value={filterInput} onChange={handleFilterInput} placeholder=\"Search Users\" />\n      \n      {filteredUsers.map((user, i) => {\n        return (\n          <div key={i} className={\"user-container \" + (selectedUser.user?.id === user.id ? \"selected\" : \"\")}>\n            <div className=\"user-container-header\">\n              <h2 onClick={()=>{dispatch(setSelectedUser(user))}}>{`${user.firstName} ${user.lastName}`}</h2>\n            \n              <div>\n                <FontAwesomeIcon onClick={()=>{handleEditMode(user)}} className=\"icon-button edit\" icon={faEdit} />\n                <FontAwesomeIcon onClick={()=>{deleteUser(user)}} className=\"icon-button trash\" icon={faTrash} />\n              </div>\n            </div>\n            <p>BUDGET: ${user.budget}</p>\n          </div>\n        )\n      })}\n\n    </div>\n  )\n}\n\nexport default UsersSidebar\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface ErrorState {\n  message: null | string\n}\n\nconst initialState: ErrorState = {\n  message: null\n}\n\nexport const ErrorSlice = createSlice({\n  name: 'error',\n  initialState,\n  reducers: {\n    setErrorMessage: (state, action: PayloadAction<string | null>) => {\n      state.message = action.payload\n    }\n  }\n})\n\nexport const { setErrorMessage } = ErrorSlice.actions\n\nexport default ErrorSlice.reducer","import { useDispatch, useSelector } from 'react-redux';\nimport './App.css'\nimport Expenses from './components/Expenses/Expenses';\nimport Header from './components/Header/Header';\nimport UsersSidebar from './components/UsersSidebar/UsersSidebar';\nimport { setErrorMessage } from './state/slices/errors';\nimport { deleteExpense } from './state/slices/expenses';\nimport { setSelectedUser } from './state/slices/selectedUser';\nimport { deleteUser } from './state/slices/users';\nimport { RootState } from './store';\nimport { UserInterface } from './typescript/interfaces';\n\nfunction App() {\n  const dispatch = useDispatch()\n  const expenses = useSelector((state: RootState) => state.expenses)\n  const selectedUser = useSelector((state: RootState) => state.selectedUser)\n\n  function deleteUserFunc(user: UserInterface) {\n    expenses.forEach(expense => {\n      if (expense.holderID === user.id) {\n        dispatch(deleteExpense(expense))\n      }\n    });\n\n    dispatch(deleteUser(user))\n\n    if (selectedUser) {\n      if (selectedUser.user?.id === user.id) {\n        dispatch(setSelectedUser(null))\n      }\n    }\n  }\n\n  function pingErrorMessage(message: string) {\n    clearTimeout()\n    dispatch(setErrorMessage(message))\n    setTimeout(() => {\n      dispatch(setErrorMessage(null))\n    }, 5000);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"main-container\">\n        <UsersSidebar deleteUser={deleteUserFunc} pingErrorMessage={pingErrorMessage} />\n        <div className=\"expenses-container\">\n          <Expenses pingErrorMessage={pingErrorMessage} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import UserReducer from \"./state/slices/users\"\nimport ExpenseReducer from \"./state/slices/expenses\"\nimport ErrorReducer from \"./state/slices/errors\"\nimport SelectedUserReducer from \"./state/slices/selectedUser\"\nimport SelectedCategoryReducer from \"./state/slices/selectedCategory\"\n\nimport { configureStore, compose } from \"@reduxjs/toolkit\"\n\n// redux dev tools setup\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = configureStore({\n  reducer: {\n    users: UserReducer,\n    expenses: ExpenseReducer,\n    errorMessage: ErrorReducer,\n    selectedUser: SelectedUserReducer,\n    selectedCategory: SelectedCategoryReducer\n  },\n  devTools: composeEnhancers\n})\n\nexport type RootState = ReturnType<typeof store.getState>\n\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './reset.css'\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}